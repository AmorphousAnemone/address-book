{"version":3,"sources":["components/navbar.component.js","components/contacts-list.component.js","components/edit-contact.component.js","components/create-contact.component.js","App.js","index.js"],"names":["Navbar","className","to","Component","Contact","props","contact","name","address","phone","email","birthdate","substring","_id","href","onClick","deleteContact","ContactsList","bind","state","contacts","axios","get","then","response","setState","data","catch","err","console","log","id","delete","res","this","filter","el","alert","map","currentcontact","key","contactList","EditContact","onChangeName","onChangeAddress","onChangePhone","onChangeEmail","onChangeBirthdate","onSubmit","Date","match","params","e","target","value","preventDefault","post","window","location","type","required","onChange","selected","variant","CreateContact","toLocaleDateString","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fb781e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n                <Link to=\"/\" className=\"navbar=brand\">Address Book</Link>\r\n                <div className=\"navbar-collapse\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"navbar-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">Contacts</Link>\r\n                    </li>\r\n                    <li className=\"navbar-item\">\r\n                        <Link to=\"/create\" className=\"nav-link\">Create Contact</Link>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// functional react component\r\n// lack of state and lifecycle methods\r\n// used when accepting props and returning JSX; simple component\r\n// this particular component is small so it can be placed in another component\r\nconst Contact = (props) => (\r\n    <tr>\r\n        <td>{props.contact.name}</td>\r\n        <td>{props.contact.address}</td>\r\n        <td>{props.contact.phone}</td>\r\n        <td>{props.contact.email}</td>\r\n        <td>{props.contact.birthdate.substring(0, 10)}</td>\r\n        <td>\r\n            <Link to={ \"/edit/\" + props.contact._id }>edit</Link> | <a href=\"#\" onClick={() => { props.deleteContact(props.contact._id) }}>delete</a>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\n// class component\r\nexport default class ContactsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.deleteContact = this.deleteContact.bind(this);\r\n\r\n        this.state = { contacts: [] }\r\n    }\r\n\r\n    // get list of contacts from database\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/contacts/')\r\n            .then(response => {\r\n                // gets the array of contacts and assigns to contacts\r\n                this.setState({ contacts: response.data }) \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    deleteContact(id) {\r\n        axios.delete('http://localhost:5000/contacts/' + id)\r\n            .then(res => console.log(res.data));\r\n        \r\n        // update the list to display every contact except the deleted item\r\n        this.setState({\r\n            contacts: this.state.contacts.filter(el => el._id !== id)\r\n        })\r\n\r\n        alert(\"Contact Deleted!\");\r\n    }\r\n\r\n    contactList() {\r\n        return this.state.contacts.map(currentcontact => {\r\n          return <Contact contact={currentcontact} deleteContact={this.deleteContact} key={currentcontact._id}/>;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Logged Contacts</h3>\r\n                <table className=\"table\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Address</th>\r\n                            <th>Phone</th>\r\n                            <th>Email</th>\r\n                            <th>Birthdate</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.contactList() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n// allows frontend data to be transferred into backened database\r\nimport axios from 'axios';\r\n\r\nexport default class EditContact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeName = this.onChangeName.bind(this);\r\n        this.onChangeAddress = this.onChangeAddress.bind(this);\r\n        this.onChangePhone = this.onChangePhone.bind(this);\r\n        this.onChangeEmail = this.onChangeEmail.bind(this);\r\n        this.onChangeBirthdate = this.onChangeBirthdate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            name: '',\r\n            address: '',\r\n            phone: '',\r\n            email: '',\r\n            birthdate: new Date(),\r\n        }\r\n    }\r\n\r\n    // auto-fill fields with current information to avoid retyping everything\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/contacts/' + this.props.match.params.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    name: response.data.name,\r\n                    address: response.data.address,\r\n                    phone: response.data.phone,\r\n                    email: response.data.email,\r\n                })\r\n            })\r\n    }\r\n\r\n    onChangeName(e) {\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeAddress(e) {\r\n        this.setState({\r\n            address: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangePhone(e) {\r\n        this.setState({\r\n            phone: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeEmail(e) {\r\n        this.setState({\r\n            email: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeBirthdate(birthdate) {\r\n        this.setState({\r\n            birthdate: birthdate\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const contact = { \r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            phone: this.state.phone,\r\n            email: this.state.email,\r\n            birthdate: this.state.birthdate,\r\n        }\r\n\r\n        // sends user data to backend\r\n        axios.post('http://localhost:5000/contacts/update/' + this.props.match.params.id, contact)\r\n            .then(res => console.log(res.data))\r\n            .catch(err => console.log('Error: ' + err));\r\n        \r\n        // once submitted, takes user back to contacts list\r\n        window.location = '/';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <h3>Edit Contact List</h3>\r\n            <form onSubmit={this.onSubmit}>\r\n              <div className=\"form-group\"> \r\n                <label>Name: </label>\r\n                <input type=\"text\"\r\n                    required\r\n                    className=\"form-control\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChangeName}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Address: </label>\r\n                <input type=\"text\"\r\n                    required\r\n                    className=\"form-control\"\r\n                    value={this.state.address}\r\n                    onChange={this.onChangeAddress}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Phone: </label>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.phone}\r\n                    onChange={this.onChangePhone}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email: </label>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Birthdate: </label>\r\n                <div>\r\n                  <DatePicker\r\n                    selected={this.state.birthdate}\r\n                    onChange={this.onChangeBirthdate}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-primary\" />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <button variant=\"secondary\" className=\"btn btn-primary\" href=\"http://localhost:5000/contacts\">Cancel</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        );\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// allows frontend data to be transferred into backend database\r\nimport axios from 'axios';\r\n\r\nexport default class CreateContact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeName = this.onChangeName.bind(this);\r\n        this.onChangeAddress = this.onChangeAddress.bind(this);\r\n        this.onChangePhone = this.onChangePhone.bind(this);\r\n        this.onChangeEmail = this.onChangeEmail.bind(this);\r\n        this.onChangeBirthdate = this.onChangeBirthdate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            name: '',\r\n            address: '',\r\n            phone: '',\r\n            email: '',\r\n            birthdate: new Date(),\r\n        }\r\n    }\r\n\r\n    onChangeName(e) {\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeAddress(e) {\r\n        this.setState({\r\n            address: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangePhone(e) {\r\n        this.setState({\r\n            phone: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeEmail(e) {\r\n        this.setState({\r\n            email: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeBirthdate(birthdate) {\r\n        this.setState({\r\n            birthdate: birthdate\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const contact = { \r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            phone: this.state.phone,\r\n            email: this.state.email,\r\n            birthdate: this.state.birthdate.toLocaleDateString('en-US'),\r\n        }\r\n\r\n        // sends user data to backend\r\n        axios.post('http://localhost:5000/contacts/add', contact)\r\n            .then(res => console.log(res.data))\r\n            .catch(err => console.log('Error: ' + err));\r\n        \r\n        // once submitted, takes user back to contacts list\r\n        window.location = '/';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <h3>Create New Contact</h3>\r\n            <form onSubmit={this.onSubmit}>\r\n              <div className=\"form-group\"> \r\n                <label>Name: </label>\r\n                <input type=\"text\"\r\n                    required\r\n                    className=\"form-control\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChangeName}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Address: </label>\r\n                <input  type=\"text\"\r\n                    required\r\n                    className=\"form-control\"\r\n                    value={this.state.address}\r\n                    onChange={this.onChangeAddress}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Phone: </label>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.phone}\r\n                    onChange={this.onChangePhone}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email: </label>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Birthdate: </label>\r\n                <div>\r\n                  <DatePicker\r\n                    selected={this.state.birthdate}\r\n                    onChange={this.onChangeBirthdate}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input type=\"submit\" value=\"Create Contact\" className=\"btn btn-primary\" />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        );\r\n    };\r\n};","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Navbar from \"./components/navbar.component\";\nimport ContactsList from \"./components/contacts-list.component\";\nimport EditContact from \"./components/edit-contact.component\";\nimport CreateContact from \"./components/create-contact.component\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Navbar />\n        <br />\n        <Route path=\"/\" exact component={ContactsList} />\n        <Route path=\"/edit/:id\" component={EditContact} />\n        <Route path=\"/create\" component={CreateContact} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}